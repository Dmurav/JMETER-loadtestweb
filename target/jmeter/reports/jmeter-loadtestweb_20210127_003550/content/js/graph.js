/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 167.0, "minX": 0.0, "maxY": 11471.0, "series": [{"data": [[0.0, 322.0], [0.1, 325.0], [0.2, 326.0], [0.3, 326.0], [0.4, 326.0], [0.5, 327.0], [0.6, 329.0], [0.7, 329.0], [0.8, 330.0], [0.9, 330.0], [1.0, 330.0], [1.1, 330.0], [1.2, 330.0], [1.3, 331.0], [1.4, 331.0], [1.5, 332.0], [1.6, 333.0], [1.7, 333.0], [1.8, 334.0], [1.9, 334.0], [2.0, 335.0], [2.1, 335.0], [2.2, 335.0], [2.3, 335.0], [2.4, 335.0], [2.5, 335.0], [2.6, 336.0], [2.7, 336.0], [2.8, 336.0], [2.9, 337.0], [3.0, 337.0], [3.1, 337.0], [3.2, 337.0], [3.3, 337.0], [3.4, 338.0], [3.5, 338.0], [3.6, 338.0], [3.7, 339.0], [3.8, 339.0], [3.9, 339.0], [4.0, 339.0], [4.1, 339.0], [4.2, 340.0], [4.3, 340.0], [4.4, 340.0], [4.5, 340.0], [4.6, 340.0], [4.7, 340.0], [4.8, 341.0], [4.9, 341.0], [5.0, 341.0], [5.1, 342.0], [5.2, 342.0], [5.3, 342.0], [5.4, 342.0], [5.5, 343.0], [5.6, 343.0], [5.7, 343.0], [5.8, 344.0], [5.9, 344.0], [6.0, 344.0], [6.1, 345.0], [6.2, 345.0], [6.3, 345.0], [6.4, 346.0], [6.5, 346.0], [6.6, 346.0], [6.7, 346.0], [6.8, 346.0], [6.9, 348.0], [7.0, 348.0], [7.1, 348.0], [7.2, 348.0], [7.3, 348.0], [7.4, 349.0], [7.5, 349.0], [7.6, 349.0], [7.7, 349.0], [7.8, 349.0], [7.9, 350.0], [8.0, 350.0], [8.1, 350.0], [8.2, 350.0], [8.3, 351.0], [8.4, 351.0], [8.5, 351.0], [8.6, 351.0], [8.7, 351.0], [8.8, 351.0], [8.9, 352.0], [9.0, 352.0], [9.1, 352.0], [9.2, 352.0], [9.3, 353.0], [9.4, 353.0], [9.5, 353.0], [9.6, 353.0], [9.7, 353.0], [9.8, 354.0], [9.9, 354.0], [10.0, 354.0], [10.1, 355.0], [10.2, 355.0], [10.3, 355.0], [10.4, 355.0], [10.5, 355.0], [10.6, 356.0], [10.7, 356.0], [10.8, 356.0], [10.9, 357.0], [11.0, 357.0], [11.1, 357.0], [11.2, 357.0], [11.3, 357.0], [11.4, 357.0], [11.5, 357.0], [11.6, 358.0], [11.7, 358.0], [11.8, 359.0], [11.9, 359.0], [12.0, 359.0], [12.1, 359.0], [12.2, 360.0], [12.3, 360.0], [12.4, 360.0], [12.5, 361.0], [12.6, 361.0], [12.7, 361.0], [12.8, 361.0], [12.9, 361.0], [13.0, 361.0], [13.1, 362.0], [13.2, 362.0], [13.3, 362.0], [13.4, 362.0], [13.5, 362.0], [13.6, 362.0], [13.7, 362.0], [13.8, 362.0], [13.9, 363.0], [14.0, 363.0], [14.1, 363.0], [14.2, 363.0], [14.3, 364.0], [14.4, 364.0], [14.5, 364.0], [14.6, 364.0], [14.7, 365.0], [14.8, 366.0], [14.9, 366.0], [15.0, 366.0], [15.1, 366.0], [15.2, 366.0], [15.3, 367.0], [15.4, 367.0], [15.5, 369.0], [15.6, 369.0], [15.7, 369.0], [15.8, 369.0], [15.9, 370.0], [16.0, 370.0], [16.1, 370.0], [16.2, 370.0], [16.3, 370.0], [16.4, 370.0], [16.5, 371.0], [16.6, 371.0], [16.7, 372.0], [16.8, 372.0], [16.9, 372.0], [17.0, 372.0], [17.1, 372.0], [17.2, 372.0], [17.3, 372.0], [17.4, 373.0], [17.5, 373.0], [17.6, 373.0], [17.7, 373.0], [17.8, 373.0], [17.9, 374.0], [18.0, 374.0], [18.1, 375.0], [18.2, 375.0], [18.3, 375.0], [18.4, 375.0], [18.5, 375.0], [18.6, 375.0], [18.7, 376.0], [18.8, 376.0], [18.9, 376.0], [19.0, 376.0], [19.1, 376.0], [19.2, 377.0], [19.3, 377.0], [19.4, 378.0], [19.5, 378.0], [19.6, 378.0], [19.7, 378.0], [19.8, 379.0], [19.9, 379.0], [20.0, 379.0], [20.1, 379.0], [20.2, 379.0], [20.3, 380.0], [20.4, 380.0], [20.5, 380.0], [20.6, 380.0], [20.7, 380.0], [20.8, 380.0], [20.9, 380.0], [21.0, 381.0], [21.1, 382.0], [21.2, 382.0], [21.3, 383.0], [21.4, 383.0], [21.5, 383.0], [21.6, 383.0], [21.7, 383.0], [21.8, 384.0], [21.9, 385.0], [22.0, 385.0], [22.1, 385.0], [22.2, 385.0], [22.3, 386.0], [22.4, 386.0], [22.5, 386.0], [22.6, 386.0], [22.7, 386.0], [22.8, 386.0], [22.9, 386.0], [23.0, 387.0], [23.1, 387.0], [23.2, 387.0], [23.3, 387.0], [23.4, 387.0], [23.5, 387.0], [23.6, 388.0], [23.7, 388.0], [23.8, 388.0], [23.9, 389.0], [24.0, 389.0], [24.1, 390.0], [24.2, 390.0], [24.3, 390.0], [24.4, 390.0], [24.5, 391.0], [24.6, 391.0], [24.7, 391.0], [24.8, 391.0], [24.9, 391.0], [25.0, 392.0], [25.1, 392.0], [25.2, 393.0], [25.3, 393.0], [25.4, 393.0], [25.5, 393.0], [25.6, 393.0], [25.7, 394.0], [25.8, 394.0], [25.9, 394.0], [26.0, 394.0], [26.1, 394.0], [26.2, 394.0], [26.3, 395.0], [26.4, 396.0], [26.5, 396.0], [26.6, 397.0], [26.7, 397.0], [26.8, 397.0], [26.9, 397.0], [27.0, 397.0], [27.1, 397.0], [27.2, 398.0], [27.3, 398.0], [27.4, 398.0], [27.5, 398.0], [27.6, 398.0], [27.7, 398.0], [27.8, 399.0], [27.9, 399.0], [28.0, 399.0], [28.1, 399.0], [28.2, 399.0], [28.3, 399.0], [28.4, 399.0], [28.5, 399.0], [28.6, 400.0], [28.7, 400.0], [28.8, 400.0], [28.9, 400.0], [29.0, 400.0], [29.1, 401.0], [29.2, 401.0], [29.3, 401.0], [29.4, 401.0], [29.5, 402.0], [29.6, 402.0], [29.7, 402.0], [29.8, 402.0], [29.9, 402.0], [30.0, 403.0], [30.1, 403.0], [30.2, 404.0], [30.3, 404.0], [30.4, 404.0], [30.5, 404.0], [30.6, 405.0], [30.7, 405.0], [30.8, 406.0], [30.9, 406.0], [31.0, 406.0], [31.1, 406.0], [31.2, 406.0], [31.3, 406.0], [31.4, 406.0], [31.5, 407.0], [31.6, 407.0], [31.7, 408.0], [31.8, 408.0], [31.9, 408.0], [32.0, 409.0], [32.1, 409.0], [32.2, 409.0], [32.3, 409.0], [32.4, 409.0], [32.5, 410.0], [32.6, 410.0], [32.7, 411.0], [32.8, 411.0], [32.9, 411.0], [33.0, 412.0], [33.1, 412.0], [33.2, 412.0], [33.3, 412.0], [33.4, 412.0], [33.5, 414.0], [33.6, 414.0], [33.7, 414.0], [33.8, 414.0], [33.9, 415.0], [34.0, 415.0], [34.1, 416.0], [34.2, 416.0], [34.3, 416.0], [34.4, 417.0], [34.5, 417.0], [34.6, 418.0], [34.7, 418.0], [34.8, 418.0], [34.9, 419.0], [35.0, 419.0], [35.1, 420.0], [35.2, 421.0], [35.3, 421.0], [35.4, 421.0], [35.5, 422.0], [35.6, 422.0], [35.7, 423.0], [35.8, 423.0], [35.9, 423.0], [36.0, 423.0], [36.1, 424.0], [36.2, 424.0], [36.3, 425.0], [36.4, 426.0], [36.5, 426.0], [36.6, 426.0], [36.7, 427.0], [36.8, 427.0], [36.9, 430.0], [37.0, 430.0], [37.1, 430.0], [37.2, 430.0], [37.3, 431.0], [37.4, 431.0], [37.5, 432.0], [37.6, 432.0], [37.7, 432.0], [37.8, 432.0], [37.9, 433.0], [38.0, 433.0], [38.1, 433.0], [38.2, 434.0], [38.3, 434.0], [38.4, 434.0], [38.5, 435.0], [38.6, 435.0], [38.7, 436.0], [38.8, 437.0], [38.9, 438.0], [39.0, 438.0], [39.1, 438.0], [39.2, 439.0], [39.3, 439.0], [39.4, 439.0], [39.5, 439.0], [39.6, 441.0], [39.7, 441.0], [39.8, 441.0], [39.9, 442.0], [40.0, 442.0], [40.1, 442.0], [40.2, 442.0], [40.3, 442.0], [40.4, 443.0], [40.5, 444.0], [40.6, 444.0], [40.7, 445.0], [40.8, 445.0], [40.9, 446.0], [41.0, 447.0], [41.1, 448.0], [41.2, 448.0], [41.3, 448.0], [41.4, 448.0], [41.5, 448.0], [41.6, 449.0], [41.7, 449.0], [41.8, 449.0], [41.9, 450.0], [42.0, 450.0], [42.1, 451.0], [42.2, 452.0], [42.3, 452.0], [42.4, 453.0], [42.5, 453.0], [42.6, 453.0], [42.7, 454.0], [42.8, 455.0], [42.9, 455.0], [43.0, 456.0], [43.1, 456.0], [43.2, 456.0], [43.3, 456.0], [43.4, 457.0], [43.5, 457.0], [43.6, 457.0], [43.7, 458.0], [43.8, 458.0], [43.9, 459.0], [44.0, 459.0], [44.1, 459.0], [44.2, 459.0], [44.3, 460.0], [44.4, 460.0], [44.5, 460.0], [44.6, 461.0], [44.7, 461.0], [44.8, 461.0], [44.9, 461.0], [45.0, 461.0], [45.1, 462.0], [45.2, 462.0], [45.3, 462.0], [45.4, 463.0], [45.5, 463.0], [45.6, 463.0], [45.7, 464.0], [45.8, 464.0], [45.9, 466.0], [46.0, 466.0], [46.1, 467.0], [46.2, 469.0], [46.3, 469.0], [46.4, 471.0], [46.5, 471.0], [46.6, 472.0], [46.7, 474.0], [46.8, 475.0], [46.9, 475.0], [47.0, 475.0], [47.1, 477.0], [47.2, 479.0], [47.3, 480.0], [47.4, 480.0], [47.5, 480.0], [47.6, 481.0], [47.7, 481.0], [47.8, 481.0], [47.9, 483.0], [48.0, 483.0], [48.1, 483.0], [48.2, 485.0], [48.3, 485.0], [48.4, 486.0], [48.5, 486.0], [48.6, 487.0], [48.7, 489.0], [48.8, 489.0], [48.9, 490.0], [49.0, 490.0], [49.1, 491.0], [49.2, 493.0], [49.3, 493.0], [49.4, 494.0], [49.5, 496.0], [49.6, 498.0], [49.7, 498.0], [49.8, 498.0], [49.9, 499.0], [50.0, 500.0], [50.1, 501.0], [50.2, 502.0], [50.3, 502.0], [50.4, 502.0], [50.5, 502.0], [50.6, 502.0], [50.7, 503.0], [50.8, 505.0], [50.9, 505.0], [51.0, 505.0], [51.1, 506.0], [51.2, 506.0], [51.3, 507.0], [51.4, 508.0], [51.5, 508.0], [51.6, 510.0], [51.7, 511.0], [51.8, 512.0], [51.9, 512.0], [52.0, 512.0], [52.1, 513.0], [52.2, 513.0], [52.3, 515.0], [52.4, 516.0], [52.5, 520.0], [52.6, 520.0], [52.7, 521.0], [52.8, 521.0], [52.9, 523.0], [53.0, 525.0], [53.1, 526.0], [53.2, 528.0], [53.3, 528.0], [53.4, 530.0], [53.5, 533.0], [53.6, 533.0], [53.7, 533.0], [53.8, 533.0], [53.9, 534.0], [54.0, 534.0], [54.1, 534.0], [54.2, 537.0], [54.3, 541.0], [54.4, 546.0], [54.5, 546.0], [54.6, 547.0], [54.7, 549.0], [54.8, 549.0], [54.9, 551.0], [55.0, 552.0], [55.1, 554.0], [55.2, 558.0], [55.3, 562.0], [55.4, 562.0], [55.5, 562.0], [55.6, 564.0], [55.7, 564.0], [55.8, 564.0], [55.9, 570.0], [56.0, 571.0], [56.1, 573.0], [56.2, 575.0], [56.3, 576.0], [56.4, 576.0], [56.5, 577.0], [56.6, 578.0], [56.7, 584.0], [56.8, 586.0], [56.9, 587.0], [57.0, 588.0], [57.1, 588.0], [57.2, 589.0], [57.3, 589.0], [57.4, 590.0], [57.5, 600.0], [57.6, 603.0], [57.7, 603.0], [57.8, 604.0], [57.9, 606.0], [58.0, 611.0], [58.1, 616.0], [58.2, 616.0], [58.3, 617.0], [58.4, 618.0], [58.5, 621.0], [58.6, 621.0], [58.7, 631.0], [58.8, 635.0], [58.9, 642.0], [59.0, 644.0], [59.1, 645.0], [59.2, 651.0], [59.3, 651.0], [59.4, 652.0], [59.5, 658.0], [59.6, 658.0], [59.7, 659.0], [59.8, 661.0], [59.9, 669.0], [60.0, 677.0], [60.1, 691.0], [60.2, 697.0], [60.3, 697.0], [60.4, 701.0], [60.5, 701.0], [60.6, 702.0], [60.7, 702.0], [60.8, 703.0], [60.9, 713.0], [61.0, 713.0], [61.1, 717.0], [61.2, 720.0], [61.3, 721.0], [61.4, 726.0], [61.5, 736.0], [61.6, 739.0], [61.7, 739.0], [61.8, 742.0], [61.9, 749.0], [62.0, 750.0], [62.1, 752.0], [62.2, 761.0], [62.3, 762.0], [62.4, 763.0], [62.5, 765.0], [62.6, 765.0], [62.7, 770.0], [62.8, 772.0], [62.9, 783.0], [63.0, 784.0], [63.1, 785.0], [63.2, 787.0], [63.3, 789.0], [63.4, 797.0], [63.5, 798.0], [63.6, 808.0], [63.7, 809.0], [63.8, 809.0], [63.9, 809.0], [64.0, 811.0], [64.1, 823.0], [64.2, 823.0], [64.3, 830.0], [64.4, 830.0], [64.5, 839.0], [64.6, 841.0], [64.7, 842.0], [64.8, 855.0], [64.9, 857.0], [65.0, 861.0], [65.1, 864.0], [65.2, 865.0], [65.3, 866.0], [65.4, 867.0], [65.5, 869.0], [65.6, 878.0], [65.7, 889.0], [65.8, 917.0], [65.9, 918.0], [66.0, 920.0], [66.1, 928.0], [66.2, 932.0], [66.3, 942.0], [66.4, 951.0], [66.5, 957.0], [66.6, 960.0], [66.7, 961.0], [66.8, 967.0], [66.9, 969.0], [67.0, 969.0], [67.1, 971.0], [67.2, 971.0], [67.3, 977.0], [67.4, 981.0], [67.5, 981.0], [67.6, 982.0], [67.7, 985.0], [67.8, 993.0], [67.9, 997.0], [68.0, 1012.0], [68.1, 1013.0], [68.2, 1025.0], [68.3, 1028.0], [68.4, 1029.0], [68.5, 1036.0], [68.6, 1040.0], [68.7, 1041.0], [68.8, 1044.0], [68.9, 1047.0], [69.0, 1048.0], [69.1, 1059.0], [69.2, 1062.0], [69.3, 1067.0], [69.4, 1067.0], [69.5, 1070.0], [69.6, 1073.0], [69.7, 1078.0], [69.8, 1082.0], [69.9, 1086.0], [70.0, 1094.0], [70.1, 1102.0], [70.2, 1104.0], [70.3, 1104.0], [70.4, 1112.0], [70.5, 1117.0], [70.6, 1117.0], [70.7, 1120.0], [70.8, 1122.0], [70.9, 1123.0], [71.0, 1129.0], [71.1, 1130.0], [71.2, 1134.0], [71.3, 1139.0], [71.4, 1142.0], [71.5, 1147.0], [71.6, 1150.0], [71.7, 1151.0], [71.8, 1154.0], [71.9, 1160.0], [72.0, 1164.0], [72.1, 1173.0], [72.2, 1182.0], [72.3, 1203.0], [72.4, 1206.0], [72.5, 1209.0], [72.6, 1210.0], [72.7, 1213.0], [72.8, 1213.0], [72.9, 1215.0], [73.0, 1217.0], [73.1, 1224.0], [73.2, 1241.0], [73.3, 1247.0], [73.4, 1249.0], [73.5, 1262.0], [73.6, 1262.0], [73.7, 1267.0], [73.8, 1267.0], [73.9, 1270.0], [74.0, 1272.0], [74.1, 1285.0], [74.2, 1287.0], [74.3, 1293.0], [74.4, 1294.0], [74.5, 1307.0], [74.6, 1311.0], [74.7, 1321.0], [74.8, 1323.0], [74.9, 1325.0], [75.0, 1326.0], [75.1, 1327.0], [75.2, 1330.0], [75.3, 1332.0], [75.4, 1342.0], [75.5, 1342.0], [75.6, 1343.0], [75.7, 1346.0], [75.8, 1350.0], [75.9, 1351.0], [76.0, 1356.0], [76.1, 1357.0], [76.2, 1359.0], [76.3, 1366.0], [76.4, 1369.0], [76.5, 1369.0], [76.6, 1373.0], [76.7, 1373.0], [76.8, 1378.0], [76.9, 1383.0], [77.0, 1399.0], [77.1, 1410.0], [77.2, 1411.0], [77.3, 1426.0], [77.4, 1428.0], [77.5, 1434.0], [77.6, 1456.0], [77.7, 1463.0], [77.8, 1467.0], [77.9, 1474.0], [78.0, 1480.0], [78.1, 1484.0], [78.2, 1486.0], [78.3, 1493.0], [78.4, 1494.0], [78.5, 1494.0], [78.6, 1495.0], [78.7, 1495.0], [78.8, 1513.0], [78.9, 1514.0], [79.0, 1536.0], [79.1, 1544.0], [79.2, 1547.0], [79.3, 1549.0], [79.4, 1552.0], [79.5, 1555.0], [79.6, 1557.0], [79.7, 1557.0], [79.8, 1560.0], [79.9, 1569.0], [80.0, 1571.0], [80.1, 1579.0], [80.2, 1584.0], [80.3, 1584.0], [80.4, 1588.0], [80.5, 1626.0], [80.6, 1632.0], [80.7, 1639.0], [80.8, 1640.0], [80.9, 1647.0], [81.0, 1652.0], [81.1, 1658.0], [81.2, 1666.0], [81.3, 1687.0], [81.4, 1695.0], [81.5, 1699.0], [81.6, 1703.0], [81.7, 1708.0], [81.8, 1714.0], [81.9, 1721.0], [82.0, 1726.0], [82.1, 1758.0], [82.2, 1758.0], [82.3, 1772.0], [82.4, 1778.0], [82.5, 1781.0], [82.6, 1789.0], [82.7, 1807.0], [82.8, 1809.0], [82.9, 1815.0], [83.0, 1821.0], [83.1, 1824.0], [83.2, 1835.0], [83.3, 1844.0], [83.4, 1862.0], [83.5, 1870.0], [83.6, 1882.0], [83.7, 1889.0], [83.8, 1890.0], [83.9, 1897.0], [84.0, 1898.0], [84.1, 1900.0], [84.2, 1915.0], [84.3, 1927.0], [84.4, 1932.0], [84.5, 1935.0], [84.6, 1943.0], [84.7, 1956.0], [84.8, 1972.0], [84.9, 1974.0], [85.0, 2003.0], [85.1, 2006.0], [85.2, 2008.0], [85.3, 2024.0], [85.4, 2027.0], [85.5, 2035.0], [85.6, 2052.0], [85.7, 2054.0], [85.8, 2055.0], [85.9, 2061.0], [86.0, 2081.0], [86.1, 2084.0], [86.2, 2091.0], [86.3, 2097.0], [86.4, 2125.0], [86.5, 2125.0], [86.6, 2129.0], [86.7, 2134.0], [86.8, 2140.0], [86.9, 2185.0], [87.0, 2187.0], [87.1, 2192.0], [87.2, 2197.0], [87.3, 2198.0], [87.4, 2203.0], [87.5, 2218.0], [87.6, 2220.0], [87.7, 2271.0], [87.8, 2309.0], [87.9, 2313.0], [88.0, 2325.0], [88.1, 2340.0], [88.2, 2342.0], [88.3, 2348.0], [88.4, 2352.0], [88.5, 2355.0], [88.6, 2366.0], [88.7, 2373.0], [88.8, 2374.0], [88.9, 2416.0], [89.0, 2423.0], [89.1, 2428.0], [89.2, 2429.0], [89.3, 2429.0], [89.4, 2448.0], [89.5, 2455.0], [89.6, 2470.0], [89.7, 2473.0], [89.8, 2479.0], [89.9, 2490.0], [90.0, 2499.0], [90.1, 2510.0], [90.2, 2518.0], [90.3, 2524.0], [90.4, 2527.0], [90.5, 2533.0], [90.6, 2537.0], [90.7, 2540.0], [90.8, 2544.0], [90.9, 2559.0], [91.0, 2565.0], [91.1, 2579.0], [91.2, 2585.0], [91.3, 2612.0], [91.4, 2617.0], [91.5, 2618.0], [91.6, 2625.0], [91.7, 2631.0], [91.8, 2631.0], [91.9, 2632.0], [92.0, 2655.0], [92.1, 2674.0], [92.2, 2703.0], [92.3, 2717.0], [92.4, 2742.0], [92.5, 2774.0], [92.6, 2778.0], [92.7, 2802.0], [92.8, 2837.0], [92.9, 2845.0], [93.0, 2848.0], [93.1, 2862.0], [93.2, 2901.0], [93.3, 3079.0], [93.4, 3113.0], [93.5, 3131.0], [93.6, 3262.0], [93.7, 3319.0], [93.8, 3345.0], [93.9, 3405.0], [94.0, 3418.0], [94.1, 3437.0], [94.2, 3441.0], [94.3, 3486.0], [94.4, 3499.0], [94.5, 3531.0], [94.6, 3576.0], [94.7, 3641.0], [94.8, 3654.0], [94.9, 3725.0], [95.0, 3739.0], [95.1, 3780.0], [95.2, 3821.0], [95.3, 3834.0], [95.4, 3841.0], [95.5, 3844.0], [95.6, 3974.0], [95.7, 3976.0], [95.8, 3995.0], [95.9, 4001.0], [96.0, 4022.0], [96.1, 4031.0], [96.2, 4039.0], [96.3, 4199.0], [96.4, 4414.0], [96.5, 4484.0], [96.6, 4522.0], [96.7, 4585.0], [96.8, 4847.0], [96.9, 5046.0], [97.0, 5838.0], [97.1, 5971.0], [97.2, 5985.0], [97.3, 6074.0], [97.4, 6224.0], [97.5, 6249.0], [97.6, 6352.0], [97.7, 6364.0], [97.8, 6739.0], [97.9, 6880.0], [98.0, 6951.0], [98.1, 7279.0], [98.2, 7471.0], [98.3, 7500.0], [98.4, 7676.0], [98.5, 8553.0], [98.6, 8601.0], [98.7, 8622.0], [98.8, 9121.0], [98.9, 9353.0], [99.0, 9406.0], [99.1, 9606.0], [99.2, 9660.0], [99.3, 9695.0], [99.4, 10367.0], [99.5, 10400.0], [99.6, 10554.0], [99.7, 11223.0], [99.8, 11245.0], [99.9, 11294.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 167.0], [0.1, 168.0], [0.2, 168.0], [0.3, 168.0], [0.4, 169.0], [0.5, 169.0], [0.6, 169.0], [0.7, 169.0], [0.8, 170.0], [0.9, 170.0], [1.0, 170.0], [1.1, 170.0], [1.2, 170.0], [1.3, 170.0], [1.4, 170.0], [1.5, 170.0], [1.6, 170.0], [1.7, 170.0], [1.8, 170.0], [1.9, 170.0], [2.0, 171.0], [2.1, 171.0], [2.2, 171.0], [2.3, 171.0], [2.4, 171.0], [2.5, 171.0], [2.6, 171.0], [2.7, 171.0], [2.8, 171.0], [2.9, 171.0], [3.0, 171.0], [3.1, 171.0], [3.2, 171.0], [3.3, 171.0], [3.4, 171.0], [3.5, 171.0], [3.6, 171.0], [3.7, 171.0], [3.8, 171.0], [3.9, 171.0], [4.0, 171.0], [4.1, 171.0], [4.2, 171.0], [4.3, 171.0], [4.4, 171.0], [4.5, 171.0], [4.6, 171.0], [4.7, 171.0], [4.8, 171.0], [4.9, 171.0], [5.0, 171.0], [5.1, 171.0], [5.2, 171.0], [5.3, 171.0], [5.4, 171.0], [5.5, 171.0], [5.6, 171.0], [5.7, 171.0], [5.8, 171.0], [5.9, 171.0], [6.0, 172.0], [6.1, 172.0], [6.2, 172.0], [6.3, 172.0], [6.4, 172.0], [6.5, 172.0], [6.6, 172.0], [6.7, 172.0], [6.8, 172.0], [6.9, 172.0], [7.0, 172.0], [7.1, 172.0], [7.2, 172.0], [7.3, 172.0], [7.4, 172.0], [7.5, 172.0], [7.6, 172.0], [7.7, 172.0], [7.8, 172.0], [7.9, 172.0], [8.0, 172.0], [8.1, 172.0], [8.2, 172.0], [8.3, 172.0], [8.4, 172.0], [8.5, 172.0], [8.6, 172.0], [8.7, 172.0], [8.8, 172.0], [8.9, 172.0], [9.0, 172.0], [9.1, 172.0], [9.2, 172.0], [9.3, 172.0], [9.4, 172.0], [9.5, 172.0], [9.6, 172.0], [9.7, 172.0], [9.8, 172.0], [9.9, 172.0], [10.0, 172.0], [10.1, 172.0], [10.2, 172.0], [10.3, 172.0], [10.4, 172.0], [10.5, 172.0], [10.6, 172.0], [10.7, 172.0], [10.8, 172.0], [10.9, 172.0], [11.0, 172.0], [11.1, 172.0], [11.2, 172.0], [11.3, 172.0], [11.4, 172.0], [11.5, 172.0], [11.6, 172.0], [11.7, 172.0], [11.8, 172.0], [11.9, 172.0], [12.0, 172.0], [12.1, 172.0], [12.2, 172.0], [12.3, 172.0], [12.4, 172.0], [12.5, 172.0], [12.6, 172.0], [12.7, 172.0], [12.8, 172.0], [12.9, 172.0], [13.0, 172.0], [13.1, 172.0], [13.2, 172.0], [13.3, 172.0], [13.4, 172.0], [13.5, 172.0], [13.6, 172.0], [13.7, 172.0], [13.8, 172.0], [13.9, 173.0], [14.0, 173.0], [14.1, 173.0], [14.2, 173.0], [14.3, 173.0], [14.4, 173.0], [14.5, 173.0], [14.6, 173.0], [14.7, 173.0], [14.8, 173.0], [14.9, 173.0], [15.0, 173.0], [15.1, 173.0], [15.2, 173.0], [15.3, 173.0], [15.4, 173.0], [15.5, 173.0], [15.6, 173.0], [15.7, 173.0], [15.8, 173.0], [15.9, 173.0], [16.0, 173.0], [16.1, 173.0], [16.2, 173.0], [16.3, 173.0], [16.4, 173.0], [16.5, 173.0], [16.6, 173.0], [16.7, 173.0], [16.8, 173.0], [16.9, 173.0], [17.0, 173.0], [17.1, 173.0], [17.2, 173.0], [17.3, 173.0], [17.4, 173.0], [17.5, 173.0], [17.6, 173.0], [17.7, 173.0], [17.8, 173.0], [17.9, 173.0], [18.0, 173.0], [18.1, 173.0], [18.2, 173.0], [18.3, 173.0], [18.4, 173.0], [18.5, 173.0], [18.6, 173.0], [18.7, 173.0], [18.8, 173.0], [18.9, 173.0], [19.0, 173.0], [19.1, 173.0], [19.2, 173.0], [19.3, 173.0], [19.4, 173.0], [19.5, 173.0], [19.6, 173.0], [19.7, 173.0], [19.8, 173.0], [19.9, 173.0], [20.0, 173.0], [20.1, 173.0], [20.2, 173.0], [20.3, 173.0], [20.4, 173.0], [20.5, 173.0], [20.6, 173.0], [20.7, 173.0], [20.8, 173.0], [20.9, 173.0], [21.0, 173.0], [21.1, 173.0], [21.2, 173.0], [21.3, 173.0], [21.4, 173.0], [21.5, 173.0], [21.6, 173.0], [21.7, 173.0], [21.8, 173.0], [21.9, 173.0], [22.0, 173.0], [22.1, 173.0], [22.2, 173.0], [22.3, 173.0], [22.4, 173.0], [22.5, 173.0], [22.6, 173.0], [22.7, 173.0], [22.8, 173.0], [22.9, 173.0], [23.0, 173.0], [23.1, 173.0], [23.2, 173.0], [23.3, 173.0], [23.4, 173.0], [23.5, 174.0], [23.6, 174.0], [23.7, 174.0], [23.8, 174.0], [23.9, 174.0], [24.0, 174.0], [24.1, 174.0], [24.2, 174.0], [24.3, 174.0], [24.4, 174.0], [24.5, 174.0], [24.6, 174.0], [24.7, 174.0], [24.8, 174.0], [24.9, 174.0], [25.0, 174.0], [25.1, 174.0], [25.2, 174.0], [25.3, 174.0], [25.4, 174.0], [25.5, 174.0], [25.6, 174.0], [25.7, 174.0], [25.8, 174.0], [25.9, 174.0], [26.0, 174.0], [26.1, 174.0], [26.2, 174.0], [26.3, 174.0], [26.4, 174.0], [26.5, 174.0], [26.6, 174.0], [26.7, 174.0], [26.8, 174.0], [26.9, 174.0], [27.0, 174.0], [27.1, 174.0], [27.2, 174.0], [27.3, 174.0], [27.4, 174.0], [27.5, 174.0], [27.6, 174.0], [27.7, 174.0], [27.8, 174.0], [27.9, 174.0], [28.0, 174.0], [28.1, 174.0], [28.2, 174.0], [28.3, 174.0], [28.4, 174.0], [28.5, 174.0], [28.6, 174.0], [28.7, 174.0], [28.8, 174.0], [28.9, 174.0], [29.0, 174.0], [29.1, 174.0], [29.2, 174.0], [29.3, 174.0], [29.4, 174.0], [29.5, 174.0], [29.6, 174.0], [29.7, 174.0], [29.8, 174.0], [29.9, 174.0], [30.0, 174.0], [30.1, 174.0], [30.2, 174.0], [30.3, 174.0], [30.4, 174.0], [30.5, 174.0], [30.6, 174.0], [30.7, 174.0], [30.8, 174.0], [30.9, 174.0], [31.0, 174.0], [31.1, 174.0], [31.2, 174.0], [31.3, 174.0], [31.4, 174.0], [31.5, 174.0], [31.6, 174.0], [31.7, 174.0], [31.8, 174.0], [31.9, 174.0], [32.0, 174.0], [32.1, 174.0], [32.2, 174.0], [32.3, 174.0], [32.4, 174.0], [32.5, 174.0], [32.6, 174.0], [32.7, 175.0], [32.8, 175.0], [32.9, 175.0], [33.0, 175.0], [33.1, 175.0], [33.2, 175.0], [33.3, 175.0], [33.4, 175.0], [33.5, 175.0], [33.6, 175.0], [33.7, 175.0], [33.8, 175.0], [33.9, 175.0], [34.0, 175.0], [34.1, 175.0], [34.2, 175.0], [34.3, 175.0], [34.4, 175.0], [34.5, 175.0], [34.6, 175.0], [34.7, 175.0], [34.8, 175.0], [34.9, 175.0], [35.0, 175.0], [35.1, 175.0], [35.2, 175.0], [35.3, 175.0], [35.4, 175.0], [35.5, 175.0], [35.6, 175.0], [35.7, 175.0], [35.8, 175.0], [35.9, 175.0], [36.0, 175.0], [36.1, 175.0], [36.2, 175.0], [36.3, 175.0], [36.4, 175.0], [36.5, 175.0], [36.6, 175.0], [36.7, 175.0], [36.8, 175.0], [36.9, 175.0], [37.0, 175.0], [37.1, 175.0], [37.2, 175.0], [37.3, 175.0], [37.4, 175.0], [37.5, 175.0], [37.6, 175.0], [37.7, 175.0], [37.8, 175.0], [37.9, 175.0], [38.0, 175.0], [38.1, 175.0], [38.2, 175.0], [38.3, 175.0], [38.4, 175.0], [38.5, 175.0], [38.6, 175.0], [38.7, 175.0], [38.8, 175.0], [38.9, 175.0], [39.0, 175.0], [39.1, 175.0], [39.2, 175.0], [39.3, 175.0], [39.4, 175.0], [39.5, 175.0], [39.6, 175.0], [39.7, 175.0], [39.8, 175.0], [39.9, 175.0], [40.0, 175.0], [40.1, 175.0], [40.2, 175.0], [40.3, 175.0], [40.4, 175.0], [40.5, 175.0], [40.6, 175.0], [40.7, 175.0], [40.8, 175.0], [40.9, 175.0], [41.0, 175.0], [41.1, 175.0], [41.2, 175.0], [41.3, 175.0], [41.4, 175.0], [41.5, 175.0], [41.6, 175.0], [41.7, 175.0], [41.8, 175.0], [41.9, 175.0], [42.0, 175.0], [42.1, 175.0], [42.2, 175.0], [42.3, 175.0], [42.4, 175.0], [42.5, 175.0], [42.6, 175.0], [42.7, 175.0], [42.8, 175.0], [42.9, 175.0], [43.0, 175.0], [43.1, 175.0], [43.2, 175.0], [43.3, 175.0], [43.4, 175.0], [43.5, 175.0], [43.6, 175.0], [43.7, 175.0], [43.8, 175.0], [43.9, 175.0], [44.0, 175.0], [44.1, 176.0], [44.2, 176.0], [44.3, 176.0], [44.4, 176.0], [44.5, 176.0], [44.6, 176.0], [44.7, 176.0], [44.8, 176.0], [44.9, 176.0], [45.0, 176.0], [45.1, 176.0], [45.2, 176.0], [45.3, 176.0], [45.4, 176.0], [45.5, 176.0], [45.6, 176.0], [45.7, 176.0], [45.8, 176.0], [45.9, 176.0], [46.0, 176.0], [46.1, 176.0], [46.2, 176.0], [46.3, 176.0], [46.4, 176.0], [46.5, 176.0], [46.6, 176.0], [46.7, 176.0], [46.8, 176.0], [46.9, 176.0], [47.0, 176.0], [47.1, 176.0], [47.2, 176.0], [47.3, 176.0], [47.4, 176.0], [47.5, 176.0], [47.6, 176.0], [47.7, 176.0], [47.8, 176.0], [47.9, 176.0], [48.0, 176.0], [48.1, 176.0], [48.2, 176.0], [48.3, 176.0], [48.4, 176.0], [48.5, 176.0], [48.6, 176.0], [48.7, 176.0], [48.8, 176.0], [48.9, 176.0], [49.0, 176.0], [49.1, 176.0], [49.2, 176.0], [49.3, 176.0], [49.4, 176.0], [49.5, 176.0], [49.6, 176.0], [49.7, 176.0], [49.8, 176.0], [49.9, 176.0], [50.0, 176.0], [50.1, 176.0], [50.2, 176.0], [50.3, 176.0], [50.4, 176.0], [50.5, 176.0], [50.6, 176.0], [50.7, 176.0], [50.8, 176.0], [50.9, 176.0], [51.0, 176.0], [51.1, 176.0], [51.2, 176.0], [51.3, 176.0], [51.4, 176.0], [51.5, 176.0], [51.6, 176.0], [51.7, 176.0], [51.8, 176.0], [51.9, 176.0], [52.0, 176.0], [52.1, 176.0], [52.2, 176.0], [52.3, 176.0], [52.4, 176.0], [52.5, 176.0], [52.6, 176.0], [52.7, 176.0], [52.8, 176.0], [52.9, 176.0], [53.0, 176.0], [53.1, 176.0], [53.2, 176.0], [53.3, 176.0], [53.4, 176.0], [53.5, 176.0], [53.6, 176.0], [53.7, 176.0], [53.8, 176.0], [53.9, 176.0], [54.0, 176.0], [54.1, 176.0], [54.2, 176.0], [54.3, 176.0], [54.4, 176.0], [54.5, 176.0], [54.6, 176.0], [54.7, 176.0], [54.8, 176.0], [54.9, 176.0], [55.0, 176.0], [55.1, 176.0], [55.2, 176.0], [55.3, 176.0], [55.4, 176.0], [55.5, 177.0], [55.6, 177.0], [55.7, 177.0], [55.8, 177.0], [55.9, 177.0], [56.0, 177.0], [56.1, 177.0], [56.2, 177.0], [56.3, 177.0], [56.4, 177.0], [56.5, 177.0], [56.6, 177.0], [56.7, 177.0], [56.8, 177.0], [56.9, 177.0], [57.0, 177.0], [57.1, 177.0], [57.2, 177.0], [57.3, 177.0], [57.4, 177.0], [57.5, 177.0], [57.6, 177.0], [57.7, 177.0], [57.8, 177.0], [57.9, 177.0], [58.0, 177.0], [58.1, 177.0], [58.2, 177.0], [58.3, 177.0], [58.4, 177.0], [58.5, 177.0], [58.6, 177.0], [58.7, 177.0], [58.8, 177.0], [58.9, 177.0], [59.0, 177.0], [59.1, 177.0], [59.2, 177.0], [59.3, 177.0], [59.4, 177.0], [59.5, 177.0], [59.6, 177.0], [59.7, 177.0], [59.8, 177.0], [59.9, 177.0], [60.0, 177.0], [60.1, 177.0], [60.2, 177.0], [60.3, 177.0], [60.4, 177.0], [60.5, 177.0], [60.6, 177.0], [60.7, 177.0], [60.8, 177.0], [60.9, 177.0], [61.0, 177.0], [61.1, 177.0], [61.2, 177.0], [61.3, 177.0], [61.4, 177.0], [61.5, 177.0], [61.6, 177.0], [61.7, 177.0], [61.8, 177.0], [61.9, 177.0], [62.0, 177.0], [62.1, 177.0], [62.2, 177.0], [62.3, 177.0], [62.4, 177.0], [62.5, 177.0], [62.6, 177.0], [62.7, 177.0], [62.8, 177.0], [62.9, 177.0], [63.0, 177.0], [63.1, 177.0], [63.2, 177.0], [63.3, 177.0], [63.4, 177.0], [63.5, 177.0], [63.6, 177.0], [63.7, 177.0], [63.8, 177.0], [63.9, 177.0], [64.0, 177.0], [64.1, 177.0], [64.2, 177.0], [64.3, 177.0], [64.4, 177.0], [64.5, 177.0], [64.6, 177.0], [64.7, 178.0], [64.8, 178.0], [64.9, 178.0], [65.0, 178.0], [65.1, 178.0], [65.2, 178.0], [65.3, 178.0], [65.4, 178.0], [65.5, 178.0], [65.6, 178.0], [65.7, 178.0], [65.8, 178.0], [65.9, 178.0], [66.0, 178.0], [66.1, 178.0], [66.2, 178.0], [66.3, 178.0], [66.4, 178.0], [66.5, 178.0], [66.6, 178.0], [66.7, 178.0], [66.8, 178.0], [66.9, 178.0], [67.0, 178.0], [67.1, 178.0], [67.2, 178.0], [67.3, 178.0], [67.4, 178.0], [67.5, 178.0], [67.6, 178.0], [67.7, 178.0], [67.8, 178.0], [67.9, 178.0], [68.0, 178.0], [68.1, 178.0], [68.2, 178.0], [68.3, 178.0], [68.4, 178.0], [68.5, 178.0], [68.6, 178.0], [68.7, 178.0], [68.8, 178.0], [68.9, 178.0], [69.0, 178.0], [69.1, 178.0], [69.2, 178.0], [69.3, 178.0], [69.4, 178.0], [69.5, 178.0], [69.6, 178.0], [69.7, 178.0], [69.8, 178.0], [69.9, 178.0], [70.0, 178.0], [70.1, 178.0], [70.2, 178.0], [70.3, 178.0], [70.4, 178.0], [70.5, 178.0], [70.6, 178.0], [70.7, 178.0], [70.8, 178.0], [70.9, 178.0], [71.0, 178.0], [71.1, 178.0], [71.2, 178.0], [71.3, 178.0], [71.4, 178.0], [71.5, 178.0], [71.6, 178.0], [71.7, 178.0], [71.8, 178.0], [71.9, 178.0], [72.0, 178.0], [72.1, 178.0], [72.2, 178.0], [72.3, 178.0], [72.4, 178.0], [72.5, 178.0], [72.6, 178.0], [72.7, 178.0], [72.8, 178.0], [72.9, 178.0], [73.0, 178.0], [73.1, 178.0], [73.2, 178.0], [73.3, 178.0], [73.4, 178.0], [73.5, 178.0], [73.6, 178.0], [73.7, 178.0], [73.8, 178.0], [73.9, 178.0], [74.0, 178.0], [74.1, 178.0], [74.2, 178.0], [74.3, 178.0], [74.4, 178.0], [74.5, 178.0], [74.6, 178.0], [74.7, 178.0], [74.8, 178.0], [74.9, 178.0], [75.0, 178.0], [75.1, 178.0], [75.2, 178.0], [75.3, 178.0], [75.4, 178.0], [75.5, 178.0], [75.6, 178.0], [75.7, 178.0], [75.8, 179.0], [75.9, 179.0], [76.0, 179.0], [76.1, 179.0], [76.2, 179.0], [76.3, 179.0], [76.4, 179.0], [76.5, 179.0], [76.6, 179.0], [76.7, 179.0], [76.8, 179.0], [76.9, 179.0], [77.0, 179.0], [77.1, 179.0], [77.2, 179.0], [77.3, 179.0], [77.4, 179.0], [77.5, 179.0], [77.6, 179.0], [77.7, 179.0], [77.8, 179.0], [77.9, 179.0], [78.0, 179.0], [78.1, 179.0], [78.2, 179.0], [78.3, 179.0], [78.4, 179.0], [78.5, 179.0], [78.6, 179.0], [78.7, 179.0], [78.8, 179.0], [78.9, 179.0], [79.0, 179.0], [79.1, 179.0], [79.2, 179.0], [79.3, 179.0], [79.4, 179.0], [79.5, 179.0], [79.6, 179.0], [79.7, 179.0], [79.8, 179.0], [79.9, 179.0], [80.0, 179.0], [80.1, 179.0], [80.2, 179.0], [80.3, 179.0], [80.4, 179.0], [80.5, 179.0], [80.6, 179.0], [80.7, 179.0], [80.8, 179.0], [80.9, 179.0], [81.0, 179.0], [81.1, 180.0], [81.2, 180.0], [81.3, 180.0], [81.4, 180.0], [81.5, 180.0], [81.6, 180.0], [81.7, 180.0], [81.8, 180.0], [81.9, 180.0], [82.0, 180.0], [82.1, 180.0], [82.2, 180.0], [82.3, 180.0], [82.4, 180.0], [82.5, 180.0], [82.6, 180.0], [82.7, 180.0], [82.8, 180.0], [82.9, 180.0], [83.0, 180.0], [83.1, 180.0], [83.2, 180.0], [83.3, 180.0], [83.4, 180.0], [83.5, 180.0], [83.6, 180.0], [83.7, 180.0], [83.8, 180.0], [83.9, 180.0], [84.0, 180.0], [84.1, 180.0], [84.2, 180.0], [84.3, 180.0], [84.4, 180.0], [84.5, 180.0], [84.6, 180.0], [84.7, 180.0], [84.8, 180.0], [84.9, 180.0], [85.0, 180.0], [85.1, 180.0], [85.2, 180.0], [85.3, 180.0], [85.4, 180.0], [85.5, 180.0], [85.6, 180.0], [85.7, 180.0], [85.8, 180.0], [85.9, 180.0], [86.0, 180.0], [86.1, 181.0], [86.2, 181.0], [86.3, 181.0], [86.4, 181.0], [86.5, 181.0], [86.6, 181.0], [86.7, 181.0], [86.8, 181.0], [86.9, 181.0], [87.0, 181.0], [87.1, 181.0], [87.2, 181.0], [87.3, 181.0], [87.4, 181.0], [87.5, 181.0], [87.6, 181.0], [87.7, 181.0], [87.8, 181.0], [87.9, 181.0], [88.0, 181.0], [88.1, 181.0], [88.2, 181.0], [88.3, 181.0], [88.4, 181.0], [88.5, 181.0], [88.6, 181.0], [88.7, 181.0], [88.8, 181.0], [88.9, 181.0], [89.0, 181.0], [89.1, 181.0], [89.2, 181.0], [89.3, 181.0], [89.4, 181.0], [89.5, 181.0], [89.6, 181.0], [89.7, 181.0], [89.8, 181.0], [89.9, 181.0], [90.0, 181.0], [90.1, 181.0], [90.2, 182.0], [90.3, 182.0], [90.4, 182.0], [90.5, 182.0], [90.6, 182.0], [90.7, 182.0], [90.8, 182.0], [90.9, 182.0], [91.0, 182.0], [91.1, 182.0], [91.2, 182.0], [91.3, 182.0], [91.4, 182.0], [91.5, 182.0], [91.6, 182.0], [91.7, 182.0], [91.8, 182.0], [91.9, 182.0], [92.0, 182.0], [92.1, 182.0], [92.2, 182.0], [92.3, 183.0], [92.4, 183.0], [92.5, 183.0], [92.6, 183.0], [92.7, 183.0], [92.8, 183.0], [92.9, 183.0], [93.0, 183.0], [93.1, 183.0], [93.2, 183.0], [93.3, 183.0], [93.4, 183.0], [93.5, 183.0], [93.6, 183.0], [93.7, 183.0], [93.8, 184.0], [93.9, 184.0], [94.0, 184.0], [94.1, 184.0], [94.2, 184.0], [94.3, 184.0], [94.4, 184.0], [94.5, 184.0], [94.6, 184.0], [94.7, 184.0], [94.8, 184.0], [94.9, 185.0], [95.0, 185.0], [95.1, 185.0], [95.2, 185.0], [95.3, 185.0], [95.4, 185.0], [95.5, 185.0], [95.6, 185.0], [95.7, 186.0], [95.8, 186.0], [95.9, 186.0], [96.0, 186.0], [96.1, 186.0], [96.2, 186.0], [96.3, 187.0], [96.4, 187.0], [96.5, 187.0], [96.6, 187.0], [96.7, 187.0], [96.8, 187.0], [96.9, 188.0], [97.0, 188.0], [97.1, 188.0], [97.2, 189.0], [97.3, 189.0], [97.4, 189.0], [97.5, 190.0], [97.6, 190.0], [97.7, 190.0], [97.8, 191.0], [97.9, 192.0], [98.0, 193.0], [98.1, 194.0], [98.2, 194.0], [98.3, 195.0], [98.4, 198.0], [98.5, 199.0], [98.6, 202.0], [98.7, 204.0], [98.8, 206.0], [98.9, 207.0], [99.0, 212.0], [99.1, 226.0], [99.2, 227.0], [99.3, 238.0], [99.4, 394.0], [99.5, 719.0], [99.6, 835.0], [99.7, 836.0], [99.8, 837.0], [99.9, 839.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 497.0], [0.1, 499.0], [0.2, 502.0], [0.3, 502.0], [0.4, 503.0], [0.5, 503.0], [0.6, 503.0], [0.7, 504.0], [0.8, 505.0], [0.9, 505.0], [1.0, 505.0], [1.1, 505.0], [1.2, 505.0], [1.3, 507.0], [1.4, 507.0], [1.5, 507.0], [1.6, 509.0], [1.7, 509.0], [1.8, 509.0], [1.9, 509.0], [2.0, 510.0], [2.1, 510.0], [2.2, 510.0], [2.3, 511.0], [2.4, 511.0], [2.5, 511.0], [2.6, 511.0], [2.7, 511.0], [2.8, 512.0], [2.9, 512.0], [3.0, 512.0], [3.1, 512.0], [3.2, 513.0], [3.3, 513.0], [3.4, 513.0], [3.5, 513.0], [3.6, 514.0], [3.7, 515.0], [3.8, 515.0], [3.9, 515.0], [4.0, 515.0], [4.1, 516.0], [4.2, 516.0], [4.3, 516.0], [4.4, 516.0], [4.5, 517.0], [4.6, 517.0], [4.7, 517.0], [4.8, 518.0], [4.9, 518.0], [5.0, 518.0], [5.1, 518.0], [5.2, 518.0], [5.3, 519.0], [5.4, 519.0], [5.5, 519.0], [5.6, 519.0], [5.7, 519.0], [5.8, 519.0], [5.9, 519.0], [6.0, 520.0], [6.1, 520.0], [6.2, 520.0], [6.3, 521.0], [6.4, 521.0], [6.5, 521.0], [6.6, 522.0], [6.7, 522.0], [6.8, 522.0], [6.9, 523.0], [7.0, 523.0], [7.1, 523.0], [7.2, 523.0], [7.3, 523.0], [7.4, 523.0], [7.5, 524.0], [7.6, 524.0], [7.7, 524.0], [7.8, 524.0], [7.9, 524.0], [8.0, 525.0], [8.1, 525.0], [8.2, 525.0], [8.3, 525.0], [8.4, 525.0], [8.5, 526.0], [8.6, 526.0], [8.7, 527.0], [8.8, 527.0], [8.9, 528.0], [9.0, 528.0], [9.1, 528.0], [9.2, 529.0], [9.3, 529.0], [9.4, 529.0], [9.5, 529.0], [9.6, 529.0], [9.7, 530.0], [9.8, 531.0], [9.9, 531.0], [10.0, 531.0], [10.1, 532.0], [10.2, 532.0], [10.3, 532.0], [10.4, 533.0], [10.5, 533.0], [10.6, 533.0], [10.7, 533.0], [10.8, 533.0], [10.9, 533.0], [11.0, 533.0], [11.1, 533.0], [11.2, 533.0], [11.3, 534.0], [11.4, 534.0], [11.5, 534.0], [11.6, 534.0], [11.7, 535.0], [11.8, 535.0], [11.9, 535.0], [12.0, 535.0], [12.1, 535.0], [12.2, 536.0], [12.3, 536.0], [12.4, 536.0], [12.5, 537.0], [12.6, 537.0], [12.7, 537.0], [12.8, 538.0], [12.9, 538.0], [13.0, 538.0], [13.1, 538.0], [13.2, 538.0], [13.3, 538.0], [13.4, 539.0], [13.5, 539.0], [13.6, 539.0], [13.7, 539.0], [13.8, 540.0], [13.9, 540.0], [14.0, 541.0], [14.1, 541.0], [14.2, 541.0], [14.3, 541.0], [14.4, 541.0], [14.5, 542.0], [14.6, 542.0], [14.7, 542.0], [14.8, 542.0], [14.9, 542.0], [15.0, 543.0], [15.1, 543.0], [15.2, 543.0], [15.3, 543.0], [15.4, 543.0], [15.5, 544.0], [15.6, 544.0], [15.7, 544.0], [15.8, 545.0], [15.9, 545.0], [16.0, 546.0], [16.1, 546.0], [16.2, 546.0], [16.3, 546.0], [16.4, 546.0], [16.5, 547.0], [16.6, 547.0], [16.7, 547.0], [16.8, 548.0], [16.9, 548.0], [17.0, 549.0], [17.1, 549.0], [17.2, 549.0], [17.3, 550.0], [17.4, 550.0], [17.5, 550.0], [17.6, 550.0], [17.7, 550.0], [17.8, 550.0], [17.9, 550.0], [18.0, 551.0], [18.1, 551.0], [18.2, 551.0], [18.3, 551.0], [18.4, 551.0], [18.5, 552.0], [18.6, 552.0], [18.7, 552.0], [18.8, 553.0], [18.9, 553.0], [19.0, 554.0], [19.1, 554.0], [19.2, 554.0], [19.3, 554.0], [19.4, 555.0], [19.5, 555.0], [19.6, 555.0], [19.7, 555.0], [19.8, 555.0], [19.9, 555.0], [20.0, 555.0], [20.1, 555.0], [20.2, 555.0], [20.3, 555.0], [20.4, 556.0], [20.5, 557.0], [20.6, 557.0], [20.7, 557.0], [20.8, 557.0], [20.9, 557.0], [21.0, 557.0], [21.1, 557.0], [21.2, 558.0], [21.3, 558.0], [21.4, 558.0], [21.5, 559.0], [21.6, 559.0], [21.7, 559.0], [21.8, 559.0], [21.9, 560.0], [22.0, 561.0], [22.1, 562.0], [22.2, 562.0], [22.3, 562.0], [22.4, 562.0], [22.5, 563.0], [22.6, 563.0], [22.7, 563.0], [22.8, 564.0], [22.9, 564.0], [23.0, 565.0], [23.1, 565.0], [23.2, 565.0], [23.3, 565.0], [23.4, 565.0], [23.5, 565.0], [23.6, 566.0], [23.7, 566.0], [23.8, 566.0], [23.9, 566.0], [24.0, 566.0], [24.1, 567.0], [24.2, 567.0], [24.3, 567.0], [24.4, 567.0], [24.5, 567.0], [24.6, 567.0], [24.7, 568.0], [24.8, 568.0], [24.9, 568.0], [25.0, 568.0], [25.1, 568.0], [25.2, 569.0], [25.3, 569.0], [25.4, 570.0], [25.5, 570.0], [25.6, 570.0], [25.7, 570.0], [25.8, 571.0], [25.9, 571.0], [26.0, 571.0], [26.1, 572.0], [26.2, 572.0], [26.3, 573.0], [26.4, 573.0], [26.5, 573.0], [26.6, 573.0], [26.7, 573.0], [26.8, 573.0], [26.9, 573.0], [27.0, 573.0], [27.1, 574.0], [27.2, 574.0], [27.3, 574.0], [27.4, 574.0], [27.5, 574.0], [27.6, 574.0], [27.7, 574.0], [27.8, 575.0], [27.9, 575.0], [28.0, 575.0], [28.1, 575.0], [28.2, 575.0], [28.3, 575.0], [28.4, 576.0], [28.5, 576.0], [28.6, 576.0], [28.7, 577.0], [28.8, 577.0], [28.9, 578.0], [29.0, 578.0], [29.1, 578.0], [29.2, 579.0], [29.3, 579.0], [29.4, 579.0], [29.5, 579.0], [29.6, 579.0], [29.7, 580.0], [29.8, 580.0], [29.9, 580.0], [30.0, 580.0], [30.1, 581.0], [30.2, 581.0], [30.3, 581.0], [30.4, 581.0], [30.5, 582.0], [30.6, 582.0], [30.7, 582.0], [30.8, 583.0], [30.9, 583.0], [31.0, 583.0], [31.1, 583.0], [31.2, 583.0], [31.3, 584.0], [31.4, 584.0], [31.5, 584.0], [31.6, 584.0], [31.7, 585.0], [31.8, 585.0], [31.9, 586.0], [32.0, 586.0], [32.1, 586.0], [32.2, 586.0], [32.3, 586.0], [32.4, 587.0], [32.5, 587.0], [32.6, 587.0], [32.7, 587.0], [32.8, 588.0], [32.9, 588.0], [33.0, 589.0], [33.1, 590.0], [33.2, 590.0], [33.3, 590.0], [33.4, 591.0], [33.5, 591.0], [33.6, 592.0], [33.7, 593.0], [33.8, 593.0], [33.9, 593.0], [34.0, 594.0], [34.1, 597.0], [34.2, 597.0], [34.3, 598.0], [34.4, 598.0], [34.5, 598.0], [34.6, 598.0], [34.7, 598.0], [34.8, 598.0], [34.9, 599.0], [35.0, 599.0], [35.1, 599.0], [35.2, 599.0], [35.3, 600.0], [35.4, 600.0], [35.5, 600.0], [35.6, 600.0], [35.7, 600.0], [35.8, 600.0], [35.9, 601.0], [36.0, 602.0], [36.1, 603.0], [36.2, 603.0], [36.3, 604.0], [36.4, 604.0], [36.5, 604.0], [36.6, 604.0], [36.7, 605.0], [36.8, 605.0], [36.9, 607.0], [37.0, 607.0], [37.1, 608.0], [37.2, 608.0], [37.3, 608.0], [37.4, 608.0], [37.5, 608.0], [37.6, 608.0], [37.7, 609.0], [37.8, 609.0], [37.9, 610.0], [38.0, 610.0], [38.1, 611.0], [38.2, 611.0], [38.3, 611.0], [38.4, 613.0], [38.5, 614.0], [38.6, 614.0], [38.7, 614.0], [38.8, 614.0], [38.9, 614.0], [39.0, 614.0], [39.1, 616.0], [39.2, 616.0], [39.3, 616.0], [39.4, 617.0], [39.5, 617.0], [39.6, 617.0], [39.7, 618.0], [39.8, 618.0], [39.9, 618.0], [40.0, 618.0], [40.1, 619.0], [40.2, 620.0], [40.3, 620.0], [40.4, 621.0], [40.5, 621.0], [40.6, 622.0], [40.7, 622.0], [40.8, 622.0], [40.9, 623.0], [41.0, 623.0], [41.1, 624.0], [41.2, 625.0], [41.3, 625.0], [41.4, 626.0], [41.5, 627.0], [41.6, 627.0], [41.7, 627.0], [41.8, 627.0], [41.9, 627.0], [42.0, 628.0], [42.1, 628.0], [42.2, 628.0], [42.3, 629.0], [42.4, 629.0], [42.5, 629.0], [42.6, 629.0], [42.7, 630.0], [42.8, 630.0], [42.9, 630.0], [43.0, 631.0], [43.1, 631.0], [43.2, 631.0], [43.3, 631.0], [43.4, 632.0], [43.5, 633.0], [43.6, 633.0], [43.7, 634.0], [43.8, 635.0], [43.9, 635.0], [44.0, 636.0], [44.1, 636.0], [44.2, 636.0], [44.3, 636.0], [44.4, 637.0], [44.5, 637.0], [44.6, 637.0], [44.7, 638.0], [44.8, 638.0], [44.9, 639.0], [45.0, 639.0], [45.1, 639.0], [45.2, 640.0], [45.3, 640.0], [45.4, 640.0], [45.5, 642.0], [45.6, 643.0], [45.7, 644.0], [45.8, 647.0], [45.9, 647.0], [46.0, 648.0], [46.1, 648.0], [46.2, 649.0], [46.3, 649.0], [46.4, 649.0], [46.5, 650.0], [46.6, 651.0], [46.7, 651.0], [46.8, 652.0], [46.9, 653.0], [47.0, 653.0], [47.1, 655.0], [47.2, 656.0], [47.3, 656.0], [47.4, 657.0], [47.5, 658.0], [47.6, 658.0], [47.7, 659.0], [47.8, 659.0], [47.9, 659.0], [48.0, 659.0], [48.1, 661.0], [48.2, 664.0], [48.3, 664.0], [48.4, 665.0], [48.5, 666.0], [48.6, 667.0], [48.7, 667.0], [48.8, 668.0], [48.9, 668.0], [49.0, 669.0], [49.1, 670.0], [49.2, 671.0], [49.3, 672.0], [49.4, 675.0], [49.5, 676.0], [49.6, 676.0], [49.7, 676.0], [49.8, 676.0], [49.9, 677.0], [50.0, 678.0], [50.1, 679.0], [50.2, 679.0], [50.3, 680.0], [50.4, 680.0], [50.5, 680.0], [50.6, 681.0], [50.7, 682.0], [50.8, 682.0], [50.9, 683.0], [51.0, 684.0], [51.1, 684.0], [51.2, 686.0], [51.3, 686.0], [51.4, 686.0], [51.5, 686.0], [51.6, 688.0], [51.7, 688.0], [51.8, 688.0], [51.9, 689.0], [52.0, 689.0], [52.1, 691.0], [52.2, 691.0], [52.3, 692.0], [52.4, 694.0], [52.5, 694.0], [52.6, 697.0], [52.7, 697.0], [52.8, 698.0], [52.9, 701.0], [53.0, 702.0], [53.1, 703.0], [53.2, 705.0], [53.3, 708.0], [53.4, 708.0], [53.5, 709.0], [53.6, 709.0], [53.7, 710.0], [53.8, 711.0], [53.9, 712.0], [54.0, 713.0], [54.1, 716.0], [54.2, 718.0], [54.3, 723.0], [54.4, 723.0], [54.5, 723.0], [54.6, 725.0], [54.7, 726.0], [54.8, 730.0], [54.9, 731.0], [55.0, 734.0], [55.1, 736.0], [55.2, 740.0], [55.3, 740.0], [55.4, 743.0], [55.5, 744.0], [55.6, 744.0], [55.7, 748.0], [55.8, 748.0], [55.9, 751.0], [56.0, 751.0], [56.1, 755.0], [56.2, 756.0], [56.3, 757.0], [56.4, 759.0], [56.5, 760.0], [56.6, 762.0], [56.7, 762.0], [56.8, 764.0], [56.9, 764.0], [57.0, 765.0], [57.1, 768.0], [57.2, 768.0], [57.3, 770.0], [57.4, 773.0], [57.5, 776.0], [57.6, 781.0], [57.7, 783.0], [57.8, 788.0], [57.9, 789.0], [58.0, 790.0], [58.1, 790.0], [58.2, 791.0], [58.3, 793.0], [58.4, 793.0], [58.5, 793.0], [58.6, 809.0], [58.7, 809.0], [58.8, 812.0], [58.9, 820.0], [59.0, 821.0], [59.1, 825.0], [59.2, 829.0], [59.3, 829.0], [59.4, 831.0], [59.5, 836.0], [59.6, 840.0], [59.7, 840.0], [59.8, 846.0], [59.9, 850.0], [60.0, 862.0], [60.1, 873.0], [60.2, 873.0], [60.3, 874.0], [60.4, 878.0], [60.5, 881.0], [60.6, 881.0], [60.7, 884.0], [60.8, 887.0], [60.9, 890.0], [61.0, 891.0], [61.1, 892.0], [61.2, 894.0], [61.3, 902.0], [61.4, 910.0], [61.5, 914.0], [61.6, 914.0], [61.7, 915.0], [61.8, 924.0], [61.9, 925.0], [62.0, 929.0], [62.1, 936.0], [62.2, 937.0], [62.3, 941.0], [62.4, 941.0], [62.5, 944.0], [62.6, 948.0], [62.7, 960.0], [62.8, 962.0], [62.9, 962.0], [63.0, 967.0], [63.1, 969.0], [63.2, 975.0], [63.3, 980.0], [63.4, 982.0], [63.5, 983.0], [63.6, 983.0], [63.7, 987.0], [63.8, 989.0], [63.9, 995.0], [64.0, 1002.0], [64.1, 1007.0], [64.2, 1008.0], [64.3, 1013.0], [64.4, 1014.0], [64.5, 1018.0], [64.6, 1029.0], [64.7, 1030.0], [64.8, 1039.0], [64.9, 1041.0], [65.0, 1041.0], [65.1, 1042.0], [65.2, 1044.0], [65.3, 1046.0], [65.4, 1057.0], [65.5, 1068.0], [65.6, 1093.0], [65.7, 1096.0], [65.8, 1108.0], [65.9, 1112.0], [66.0, 1114.0], [66.1, 1119.0], [66.2, 1124.0], [66.3, 1126.0], [66.4, 1134.0], [66.5, 1135.0], [66.6, 1137.0], [66.7, 1142.0], [66.8, 1142.0], [66.9, 1142.0], [67.0, 1142.0], [67.1, 1149.0], [67.2, 1153.0], [67.3, 1154.0], [67.4, 1157.0], [67.5, 1162.0], [67.6, 1166.0], [67.7, 1172.0], [67.8, 1191.0], [67.9, 1195.0], [68.0, 1198.0], [68.1, 1199.0], [68.2, 1203.0], [68.3, 1203.0], [68.4, 1206.0], [68.5, 1216.0], [68.6, 1223.0], [68.7, 1223.0], [68.8, 1224.0], [68.9, 1226.0], [69.0, 1232.0], [69.1, 1237.0], [69.2, 1245.0], [69.3, 1245.0], [69.4, 1254.0], [69.5, 1257.0], [69.6, 1257.0], [69.7, 1263.0], [69.8, 1273.0], [69.9, 1280.0], [70.0, 1290.0], [70.1, 1295.0], [70.2, 1298.0], [70.3, 1299.0], [70.4, 1308.0], [70.5, 1311.0], [70.6, 1312.0], [70.7, 1316.0], [70.8, 1316.0], [70.9, 1317.0], [71.0, 1318.0], [71.1, 1321.0], [71.2, 1321.0], [71.3, 1329.0], [71.4, 1330.0], [71.5, 1333.0], [71.6, 1334.0], [71.7, 1337.0], [71.8, 1347.0], [71.9, 1350.0], [72.0, 1375.0], [72.1, 1384.0], [72.2, 1385.0], [72.3, 1390.0], [72.4, 1392.0], [72.5, 1393.0], [72.6, 1394.0], [72.7, 1395.0], [72.8, 1403.0], [72.9, 1413.0], [73.0, 1424.0], [73.1, 1425.0], [73.2, 1437.0], [73.3, 1439.0], [73.4, 1444.0], [73.5, 1444.0], [73.6, 1448.0], [73.7, 1455.0], [73.8, 1459.0], [73.9, 1462.0], [74.0, 1469.0], [74.1, 1475.0], [74.2, 1482.0], [74.3, 1486.0], [74.4, 1498.0], [74.5, 1499.0], [74.6, 1501.0], [74.7, 1507.0], [74.8, 1507.0], [74.9, 1508.0], [75.0, 1510.0], [75.1, 1515.0], [75.2, 1516.0], [75.3, 1519.0], [75.4, 1522.0], [75.5, 1522.0], [75.6, 1530.0], [75.7, 1531.0], [75.8, 1531.0], [75.9, 1533.0], [76.0, 1537.0], [76.1, 1546.0], [76.2, 1548.0], [76.3, 1549.0], [76.4, 1549.0], [76.5, 1558.0], [76.6, 1560.0], [76.7, 1571.0], [76.8, 1585.0], [76.9, 1588.0], [77.0, 1597.0], [77.1, 1606.0], [77.2, 1606.0], [77.3, 1611.0], [77.4, 1637.0], [77.5, 1641.0], [77.6, 1645.0], [77.7, 1655.0], [77.8, 1658.0], [77.9, 1658.0], [78.0, 1665.0], [78.1, 1665.0], [78.2, 1666.0], [78.3, 1672.0], [78.4, 1675.0], [78.5, 1678.0], [78.6, 1687.0], [78.7, 1694.0], [78.8, 1711.0], [78.9, 1722.0], [79.0, 1723.0], [79.1, 1727.0], [79.2, 1730.0], [79.3, 1730.0], [79.4, 1733.0], [79.5, 1735.0], [79.6, 1746.0], [79.7, 1746.0], [79.8, 1752.0], [79.9, 1755.0], [80.0, 1761.0], [80.1, 1763.0], [80.2, 1788.0], [80.3, 1804.0], [80.4, 1806.0], [80.5, 1812.0], [80.6, 1813.0], [80.7, 1822.0], [80.8, 1825.0], [80.9, 1827.0], [81.0, 1833.0], [81.1, 1841.0], [81.2, 1872.0], [81.3, 1873.0], [81.4, 1874.0], [81.5, 1880.0], [81.6, 1890.0], [81.7, 1893.0], [81.8, 1901.0], [81.9, 1936.0], [82.0, 1937.0], [82.1, 1944.0], [82.2, 1948.0], [82.3, 1959.0], [82.4, 1960.0], [82.5, 1966.0], [82.6, 1982.0], [82.7, 1993.0], [82.8, 1998.0], [82.9, 2001.0], [83.0, 2002.0], [83.1, 2015.0], [83.2, 2021.0], [83.3, 2043.0], [83.4, 2043.0], [83.5, 2062.0], [83.6, 2063.0], [83.7, 2068.0], [83.8, 2069.0], [83.9, 2073.0], [84.0, 2073.0], [84.1, 2091.0], [84.2, 2104.0], [84.3, 2106.0], [84.4, 2109.0], [84.5, 2117.0], [84.6, 2134.0], [84.7, 2145.0], [84.8, 2151.0], [84.9, 2176.0], [85.0, 2181.0], [85.1, 2183.0], [85.2, 2204.0], [85.3, 2204.0], [85.4, 2211.0], [85.5, 2226.0], [85.6, 2226.0], [85.7, 2231.0], [85.8, 2237.0], [85.9, 2260.0], [86.0, 2260.0], [86.1, 2270.0], [86.2, 2273.0], [86.3, 2301.0], [86.4, 2302.0], [86.5, 2304.0], [86.6, 2320.0], [86.7, 2321.0], [86.8, 2359.0], [86.9, 2367.0], [87.0, 2370.0], [87.1, 2371.0], [87.2, 2376.0], [87.3, 2384.0], [87.4, 2400.0], [87.5, 2415.0], [87.6, 2448.0], [87.7, 2485.0], [87.8, 2486.0], [87.9, 2497.0], [88.0, 2516.0], [88.1, 2519.0], [88.2, 2519.0], [88.3, 2528.0], [88.4, 2533.0], [88.5, 2542.0], [88.6, 2546.0], [88.7, 2546.0], [88.8, 2548.0], [88.9, 2596.0], [89.0, 2600.0], [89.1, 2604.0], [89.2, 2606.0], [89.3, 2606.0], [89.4, 2629.0], [89.5, 2631.0], [89.6, 2647.0], [89.7, 2650.0], [89.8, 2653.0], [89.9, 2669.0], [90.0, 2679.0], [90.1, 2692.0], [90.2, 2699.0], [90.3, 2700.0], [90.4, 2702.0], [90.5, 2708.0], [90.6, 2717.0], [90.7, 2718.0], [90.8, 2719.0], [90.9, 2733.0], [91.0, 2742.0], [91.1, 2764.0], [91.2, 2769.0], [91.3, 2783.0], [91.4, 2796.0], [91.5, 2797.0], [91.6, 2800.0], [91.7, 2805.0], [91.8, 2812.0], [91.9, 2819.0], [92.0, 2829.0], [92.1, 2849.0], [92.2, 2887.0], [92.3, 2893.0], [92.4, 2923.0], [92.5, 2943.0], [92.6, 2952.0], [92.7, 2982.0], [92.8, 3015.0], [92.9, 3022.0], [93.0, 3023.0], [93.1, 3040.0], [93.2, 3076.0], [93.3, 3251.0], [93.4, 3288.0], [93.5, 3309.0], [93.6, 3474.0], [93.7, 3503.0], [93.8, 3520.0], [93.9, 3581.0], [94.0, 3591.0], [94.1, 3614.0], [94.2, 3618.0], [94.3, 3660.0], [94.4, 3676.0], [94.5, 3702.0], [94.6, 3748.0], [94.7, 3812.0], [94.8, 3838.0], [94.9, 3901.0], [95.0, 3912.0], [95.1, 3955.0], [95.2, 3993.0], [95.3, 4009.0], [95.4, 4016.0], [95.5, 4017.0], [95.6, 4146.0], [95.7, 4151.0], [95.8, 4172.0], [95.9, 4200.0], [96.0, 4207.0], [96.1, 4208.0], [96.2, 4214.0], [96.3, 4375.0], [96.4, 4589.0], [96.5, 4661.0], [96.6, 4700.0], [96.7, 4759.0], [96.8, 5023.0], [96.9, 5220.0], [97.0, 6015.0], [97.1, 6150.0], [97.2, 6161.0], [97.3, 6399.0], [97.4, 6428.0], [97.5, 6468.0], [97.6, 6528.0], [97.7, 6547.0], [97.8, 6917.0], [97.9, 7083.0], [98.0, 7128.0], [98.1, 7453.0], [98.2, 7653.0], [98.3, 7674.0], [98.4, 7846.0], [98.5, 8725.0], [98.6, 8776.0], [98.7, 8794.0], [98.8, 9296.0], [98.9, 9534.0], [99.0, 9587.0], [99.1, 9787.0], [99.2, 9839.0], [99.3, 9877.0], [99.4, 10556.0], [99.5, 10576.0], [99.6, 10737.0], [99.7, 11397.0], [99.8, 11429.0], [99.9, 11471.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 986.0, "series": [{"data": [[600.0, 29.0], [700.0, 32.0], [800.0, 22.0], [900.0, 22.0], [1000.0, 22.0], [1100.0, 22.0], [1200.0, 22.0], [1300.0, 26.0], [1400.0, 17.0], [1500.0, 17.0], [1600.0, 11.0], [1700.0, 11.0], [1800.0, 14.0], [1900.0, 9.0], [2000.0, 14.0], [2100.0, 10.0], [2200.0, 4.0], [2300.0, 11.0], [2400.0, 12.0], [2500.0, 12.0], [2600.0, 9.0], [2800.0, 5.0], [2700.0, 5.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 2.0], [3300.0, 2.0], [3200.0, 1.0], [3400.0, 6.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 3.0], [3800.0, 4.0], [3900.0, 3.0], [4000.0, 4.0], [4100.0, 1.0], [4500.0, 2.0], [4400.0, 2.0], [4800.0, 1.0], [5000.0, 1.0], [5800.0, 1.0], [5900.0, 2.0], [6000.0, 1.0], [6300.0, 2.0], [6200.0, 2.0], [6800.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7400.0, 1.0], [7200.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [8600.0, 2.0], [8500.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [9600.0, 3.0], [9400.0, 1.0], [10500.0, 1.0], [10300.0, 1.0], [10400.0, 1.0], [11200.0, 3.0], [300.0, 286.0], [400.0, 213.0], [500.0, 75.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[300.0, 1.0], [700.0, 1.0], [100.0, 986.0], [200.0, 8.0], [800.0, 4.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[600.0, 176.0], [700.0, 57.0], [800.0, 27.0], [900.0, 27.0], [1000.0, 18.0], [1100.0, 24.0], [1200.0, 23.0], [1300.0, 24.0], [1400.0, 18.0], [1500.0, 25.0], [1600.0, 17.0], [1700.0, 15.0], [1800.0, 15.0], [1900.0, 11.0], [2000.0, 13.0], [2100.0, 10.0], [2300.0, 11.0], [2200.0, 11.0], [2400.0, 6.0], [2500.0, 10.0], [2600.0, 13.0], [2800.0, 8.0], [2700.0, 13.0], [2900.0, 4.0], [3000.0, 5.0], [3200.0, 2.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 4.0], [3600.0, 4.0], [3700.0, 2.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 3.0], [4200.0, 4.0], [4100.0, 3.0], [4300.0, 1.0], [4600.0, 1.0], [4500.0, 1.0], [4700.0, 2.0], [5000.0, 1.0], [5200.0, 1.0], [6100.0, 2.0], [6000.0, 1.0], [6300.0, 1.0], [6500.0, 2.0], [6400.0, 2.0], [6900.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7600.0, 2.0], [7800.0, 1.0], [8700.0, 3.0], [9200.0, 1.0], [9500.0, 2.0], [9700.0, 1.0], [9800.0, 2.0], [10700.0, 1.0], [10500.0, 2.0], [11400.0, 2.0], [11300.0, 1.0], [400.0, 2.0], [500.0, 350.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 466.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1497.0, "series": [{"data": [[0.0, 1497.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1037.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 466.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.344660194174755, "minX": 1.6116969E12, "maxY": 10.0, "series": [{"data": [[1.61169708E12, 5.344660194174755], [1.6116969E12, 10.0], [1.61169702E12, 9.630818619582678], [1.61169696E12, 10.0]], "isOverall": false, "label": "BlazeDemo Home Page", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61169708E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 174.0, "minX": 1.0, "maxY": 1767.4285714285716, "series": [{"data": [[8.0, 1361.9090909090908], [4.0, 366.0], [2.0, 577.2], [1.0, 1591.4285714285716], [9.0, 939.5249999999999], [10.0, 1168.6159509202446], [5.0, 753.0], [6.0, 861.7333333333335], [3.0, 386.0], [7.0, 1304.869565217392]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[9.527000000000001, 1151.122]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[8.0, 178.68181818181816], [4.0, 178.0], [2.0, 174.3], [1.0, 175.85714285714286], [9.0, 183.3], [10.0, 179.46012269938657], [5.0, 174.0], [6.0, 174.46666666666667], [3.0, 176.0], [7.0, 205.1739130434783]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[9.527000000000001, 180.146]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[8.0, 1540.7954545454545], [4.0, 544.0], [2.0, 751.6], [1.0, 1767.4285714285716], [9.0, 1123.1124999999995], [10.0, 1348.3509202453995], [5.0, 927.0], [6.0, 1036.4666666666667], [3.0, 562.0], [7.0, 1510.3478260869565]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[9.527000000000001, 1331.5370000000012]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 10.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 127.6, "minX": 1.6116969E12, "maxY": 57331.85, "series": [{"data": [[1.61169708E12, 8132.35], [1.6116969E12, 1645.1], [1.61169702E12, 47791.1], [1.61169696E12, 57331.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.61169708E12, 535.5333333333333], [1.6116969E12, 127.6], [1.61169702E12, 3213.2], [1.61169696E12, 3857.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61169708E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 178.24396135265712, "minX": 1.6116969E12, "maxY": 1400.9543269230765, "series": [{"data": [[1.61169708E12, 1113.9295774647883], [1.6116969E12, 992.4285714285714], [1.61169702E12, 1222.53125], [1.61169696E12, 1101.3346693386766]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.61169708E12, 186.12499999999994], [1.6116969E12, 184.45833333333331], [1.61169702E12, 178.24396135265712], [1.61169696E12, 180.75100401606417]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.61169708E12, 1299.3380281690143], [1.6116969E12, 1179.214285714286], [1.61169702E12, 1400.9543269230765], [1.61169696E12, 1282.5210420841686]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61169708E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 178.17788461538458, "minX": 1.6116969E12, "maxY": 1221.2692307692307, "series": [{"data": [[1.61169708E12, 1113.2535211267605], [1.6116969E12, 990.7142857142857], [1.61169702E12, 1221.2692307692307], [1.61169696E12, 1100.5651302605204]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.61169708E12, 186.12499999999994], [1.6116969E12, 184.45833333333331], [1.61169702E12, 178.23913043478257], [1.61169696E12, 180.74497991967874]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.61169708E12, 185.1830985915493], [1.6116969E12, 185.7142857142857], [1.61169702E12, 178.17788461538458], [1.61169696E12, 180.90380761523053]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61169708E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 18.46875, "minX": 1.6116969E12, "maxY": 135.57142857142856, "series": [{"data": [[1.61169708E12, 73.91549295774648], [1.6116969E12, 135.57142857142856], [1.61169702E12, 71.72596153846156], [1.61169696E12, 72.80360721442877]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.61169708E12, 18.46875], [1.6116969E12, 22.249999999999996], [1.61169702E12, 19.048309178743963], [1.61169696E12, 19.259036144578303]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.61169708E12, 18.507042253521124], [1.6116969E12, 24.0], [1.61169702E12, 19.03125000000001], [1.61169696E12, 19.290581162324628]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61169708E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 167.0, "minX": 1.6116969E12, "maxY": 11471.0, "series": [{"data": [[1.61169708E12, 4589.0], [1.6116969E12, 1788.0], [1.61169702E12, 9587.0], [1.61169696E12, 11471.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.61169708E12, 169.0], [1.6116969E12, 172.0], [1.61169702E12, 167.0], [1.61169696E12, 169.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.61169708E12, 2087.5], [1.6116969E12, 1383.7], [1.61169702E12, 2070.6000000000004], [1.61169696E12, 1890.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.61169708E12, 8565.0], [1.6116969E12, 1788.0], [1.61169702E12, 8646.719999999978], [1.61169696E12, 9751.119999999992]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.61169708E12, 2848.25], [1.6116969E12, 1547.7], [1.61169702E12, 2820.999999999998], [1.61169696E12, 2596.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61169708E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 176.0, "minX": 1000.0, "maxY": 3391.5, "series": [{"data": [[3000.0, 494.0], [2000.0, 623.5], [1000.0, 176.0], [4000.0, 3391.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 176.0, "minX": 1000.0, "maxY": 324.5, "series": [{"data": [[3000.0, 177.5], [2000.0, 324.5], [1000.0, 176.0], [4000.0, 278.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 4000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2, "minX": 1.6116969E12, "maxY": 24.933333333333334, "series": [{"data": [[1.61169708E12, 3.1666666666666665], [1.6116969E12, 1.2], [1.61169702E12, 20.7], [1.61169696E12, 24.933333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61169708E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.6116969E12, "maxY": 16.633333333333333, "series": [{"data": [[1.61169708E12, 2.3666666666666667], [1.6116969E12, 0.4666666666666667], [1.61169702E12, 13.866666666666667], [1.61169696E12, 16.633333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.61169708E12, 1.0666666666666667], [1.6116969E12, 0.4], [1.61169702E12, 6.9], [1.61169696E12, 8.3]], "isOverall": false, "label": "302", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.61169708E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.6116969E12, "maxY": 8.316666666666666, "series": [{"data": [[1.61169708E12, 1.1833333333333333], [1.6116969E12, 0.23333333333333334], [1.61169702E12, 6.933333333333334], [1.61169696E12, 8.316666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.61169708E12, 1.0666666666666667], [1.6116969E12, 0.4], [1.61169702E12, 6.9], [1.61169696E12, 8.3]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.61169708E12, 1.1833333333333333], [1.6116969E12, 0.23333333333333334], [1.61169702E12, 6.933333333333334], [1.61169696E12, 8.316666666666666]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61169708E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8666666666666667, "minX": 1.6116969E12, "maxY": 24.933333333333334, "series": [{"data": [[1.61169708E12, 3.433333333333333], [1.6116969E12, 0.8666666666666667], [1.61169702E12, 20.766666666666666], [1.61169696E12, 24.933333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.61169708E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

